* {
  margin: 0;
  padding: 0;
  border: none;
  box-sizing: border-box;
  outline: none;
  font-family: "Roboto"; }

/* BASICS */
.CodeMirror {
  /* Set height, width, borders, and global font properties here */
  font-family: "Roboto", sans-serif;
  height: auto;
  overflow: visible;
  color: inherit;
  direction: ltr;
  margin-bottom: 50%; }
  .CodeMirror ::-webkit-scrollbar {
    width: 0px;
    background: transparent; }

/* PADDING */
.CodeMirror-lines {
  padding: 4px 0;
  /* Vertical padding around content */ }

.CodeMirror pre {
  padding: 0 4px;
  /* Horizontal padding of content */ }

.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
  background-color: white;
  /* The little square between H and V scrollbars */ }

/* GUTTER */
.CodeMirror-gutters {
  border-right: 1px solid #ddd;
  background-color: #f7f7f7;
  white-space: nowrap; }

.CodeMirror-linenumber {
  padding: 0 3px 0 5px;
  min-width: 20px;
  text-align: right;
  color: #999;
  white-space: nowrap; }

.CodeMirror-guttermarker {
  color: black; }

.CodeMirror-guttermarker-subtle {
  color: #999; }

/* CURSOR */
.CodeMirror-cursor {
  border-left: 1px solid black;
  border-right: none;
  width: 0; }

/* Shown when moving in bi-directional text */
.CodeMirror div.CodeMirror-secondarycursor {
  border-left: 1px solid silver; }

.cm-fat-cursor .CodeMirror-cursor {
  width: auto;
  border: 0 !important;
  background: #7e7; }

.cm-fat-cursor div.CodeMirror-cursors {
  z-index: 1; }

.cm-fat-cursor-mark {
  background-color: rgba(20, 255, 20, 0.5);
  -webkit-animation: blink 1.06s steps(1) infinite;
  animation: blink 1.06s steps(1) infinite; }

.cm-animate-fat-cursor {
  width: auto;
  border: 0;
  -webkit-animation: blink 1.06s steps(1) infinite;
  animation: blink 1.06s steps(1) infinite;
  background-color: #7e7; }

@-webkit-keyframes blink {
  0% { }
  50% {
    background-color: transparent; }
  100% { } }

@keyframes blink {
  0% { }
  50% {
    background-color: transparent; }
  100% { } }

/* Can style cursor different in overwrite (non-insert) mode */
.cm-tab {
  display: inline-block;
  text-decoration: inherit; }

.CodeMirror-rulers {
  position: absolute;
  left: 0;
  right: 0;
  top: -50px;
  bottom: -20px;
  overflow: hidden; }

.CodeMirror-ruler {
  border-left: 1px solid #ccc;
  top: 0;
  bottom: 0;
  position: absolute; }

/* The rest of this file contains styles related to the mechanics of
 * the editor. You probably shouldn't touch them. */
.CodeMirror {
  position: relative;
  overflow: hidden;
  background: inherit; }

.CodeMirror-scroll {
  overflow: scroll !important;
  /* Things will break if this is overridden */
  /* 30px is the magic margin used to hide the element's real scrollbars */
  /* See overflow: hidden in .CodeMirror */
  margin-bottom: -30px;
  margin-right: -30px;
  padding-bottom: 30px;
  height: 100%;
  outline: none;
  /* Prevent dragging from highlighting the element */
  position: relative; }

.CodeMirror-sizer {
  position: relative;
  border-right: 30px solid transparent; }

/* The fake, visible scrollbars. Used to force redraw during scrolling
 * before actual scrolling happens, thus preventing shaking and
 * flickering artifacts. */
.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {
  position: absolute;
  z-index: 6;
  display: none; }

.CodeMirror-vscrollbar {
  right: 0;
  top: 0;
  overflow-x: hidden;
  overflow-y: scroll; }

.CodeMirror-hscrollbar {
  bottom: 0;
  left: 0;
  overflow-y: hidden;
  overflow-x: scroll; }

.CodeMirror-scrollbar-filler {
  right: 0;
  bottom: 0; }

.CodeMirror-gutter-filler {
  left: 0;
  bottom: 0; }

.CodeMirror-gutters {
  position: absolute;
  left: 0;
  top: 0;
  min-height: 100%;
  z-index: 3; }

.CodeMirror-gutter {
  white-space: normal;
  height: 100%;
  display: inline-block;
  vertical-align: top;
  margin-bottom: -30px; }

.CodeMirror-gutter-wrapper {
  position: absolute;
  z-index: 4;
  background: none !important;
  border: none !important; }

.CodeMirror-gutter-background {
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 4; }

.CodeMirror-gutter-elt {
  position: absolute;
  cursor: default;
  z-index: 4; }

.CodeMirror-gutter-wrapper ::-moz-selection, .CodeMirror-gutter-wrapper ::selection, .CodeMirror-gutter-wrapper ::-moz-selection {
  background-color: transparent; }

.CodeMirror-lines {
  cursor: text;
  min-height: 1px;
  /* prevents collapsing before first draw */ }

.CodeMirror pre {
  /* Reset some styles that the rest of the page might have set */
  border-radius: 0;
  border-width: 0;
  background: transparent;
  font-family: inherit;
  font-size: inherit;
  margin: 0;
  white-space: pre;
  word-wrap: normal;
  line-height: inherit;
  color: inherit;
  z-index: 2;
  position: relative;
  overflow: visible;
  -webkit-tap-highlight-color: transparent;
  -webkit-font-variant-ligatures: contextual;
  font-variant-ligatures: contextual; }

.CodeMirror-wrap pre {
  word-wrap: break-word;
  white-space: pre-wrap;
  word-break: normal; }

.CodeMirror-linebackground {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: 0; }

.CodeMirror-linewidget {
  position: relative;
  z-index: 2;
  padding: 0.1px;
  /* Force widget margins to stay inside of the container */ }

.CodeMirror-rtl pre {
  direction: rtl; }

.CodeMirror-code {
  outline: none; }

/* Force content-box sizing for the elements where we expect it */
.CodeMirror-scroll, .CodeMirror-sizer, .CodeMirror-gutter, .CodeMirror-gutters, .CodeMirror-linenumber {
  -webkit-box-sizing: content-box;
  box-sizing: content-box; }

.CodeMirror-measure {
  position: absolute;
  width: 100%;
  height: 0;
  overflow: hidden;
  visibility: hidden; }

.CodeMirror-cursor {
  position: absolute;
  pointer-events: none; }

.CodeMirror-measure pre {
  position: static; }

div.CodeMirror-cursors {
  visibility: hidden;
  position: relative;
  z-index: 3; }

div.CodeMirror-dragcursors {
  visibility: visible; }

.CodeMirror-focused div.CodeMirror-cursors {
  visibility: visible; }

.CodeMirror-selected {
  background: #d9d9d9; }

.CodeMirror-focused .CodeMirror-selected {
  background: #d7d4f0; }

.CodeMirror-crosshair {
  cursor: crosshair; }

.CodeMirror-line::-moz-selection {
  background: #d7d4f0; }

.CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection {
  background: #d7d4f0; }

.CodeMirror-line::selection {
  background: #d7d4f0; }

.CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection {
  background: #d7d4f0; }

.CodeMirror-line::-moz-selection {
  background: #d7d4f0; }

.CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection {
  background: #d7d4f0; }

.cm-searching {
  background-color: #ffa;
  background-color: rgba(255, 255, 0, 0.4); }

/* Used to force a border model for a node */
.cm-force-border {
  padding-right: .1px; }

@media print {
  /* Hide the cursor when printing */
  .CodeMirror div.CodeMirror-cursors {
    visibility: hidden; } }

/* See issue #2901 */
.cm-tab-wrap-hack:after {
  content: ''; }

/* Help users use markselection to safely style text background */
span.CodeMirror-selectedtext {
  background: none; }

.CodeMirror {
  background-color: #222;
  color: rgba(255, 255, 255, 0.85);
  font-size: 24px; }

.CodeMirror-cursor {
  border-left: 2px solid rgba(204, 204, 204, 0.85); }

.CodeMirror div.CodeMirror-secondarycursor {
  border-left: 2px solid rgba(153, 153, 153, 0.85); }

.CodeMirror-selected, .CodeMirror-focused .CodeMirror-selected {
  background-color: rgba(255, 255, 255, 0.1); }

.cm-formatting {
  color: rgba(255, 255, 255, 0.4); }

.CodeMirror-line *:not(.cm-m-markdown) {
  color: #e9eded; }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-cursor {
    border-left: 1px solid #f8f8f0; }
  .CodeMirror-line *:not(.cm-m-markdown) div.CodeMirror-selected {
    background: rgba(255, 255, 255, 0.15); }
  .CodeMirror-line *:not(.cm-m-markdown).CodeMirror-focused div.CodeMirror-selected {
    background: rgba(255, 255, 255, 0.1); }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-line::selection {
    background: rgba(255, 255, 255, 0.1); }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-line > span::selection, .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-line > span > span::selection {
    background: rgba(255, 255, 255, 0.1); }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-line::-moz-selection {
    background: rgba(255, 255, 255, 0.1); }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-line > span::-moz-selection, .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-line > span > span::-moz-selection {
    background: rgba(255, 255, 255, 0.1); }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-activeline-background {
    background: transparent; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-keyword {
    color: #c792ea; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-operator {
    color: #e9eded; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-variable-2 {
    color: #80CBC4; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-variable-3, .CodeMirror-line *:not(.cm-m-markdown) .cm-type {
    color: #82B1FF; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-builtin {
    color: #DECB6B; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-atom, .CodeMirror-line *:not(.cm-m-markdown) .cm-number {
    color: #F77669; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-def {
    color: #e9eded; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-string {
    color: #C3E88D; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-string-2 {
    color: #80CBC4; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-comment {
    color: #546E7A; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-variable {
    color: #82B1FF; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-tag, .CodeMirror-line *:not(.cm-m-markdown) .cm-meta {
    color: #80CBC4; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-attribute {
    color: #FFCB6B; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-property {
    color: #80CBAE; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-qualifier, .CodeMirror-line *:not(.cm-m-markdown) .cm-variable-3, .CodeMirror-line *:not(.cm-m-markdown) .cm-type {
    color: #DECB6B; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-tag {
    color: #ff5370; }
  .CodeMirror-line *:not(.cm-m-markdown) .cm-error {
    color: white;
    background-color: #EC5F67; }
  .CodeMirror-line *:not(.cm-m-markdown) .CodeMirror-matchingbracket {
    text-decoration: underline;
    color: white !important; }

.cm-header {
  font-weight: 800;
  line-height: 1.1em; }

.cm-header-1 {
  font-size: 2.4em;
  line-height: 1.6em; }

.cm-header-2 {
  font-size: 2em;
  line-height: 1.4em; }

.cm-header-3 {
  font-size: 1.8em;
  line-height: 1.2em; }

.cm-header-4 {
  font-size: 1.4em; }

.cm-header-5 {
  font-size: 1.2em; }

.cm-header-6 {
  font-size: 1em; }

.cm-formatting:not(.cm-formatting-header):not(.cm-formatting-quote) {
  font-size: 0.6em;
  opacity: 0.8; }

.CodeMirror *:not(.cm-m-markdown) {
  font-family: 'Roboto Mono', monospace; }

.CodeMirror-placeholder {
  font-family: "Roboto", sans-serif !important;
  opacity: 0.2; }

.cm-em {
  font-style: italic; }

.cm-strong {
  font-weight: 800; }

.cm-strikethrough {
  text-decoration: line-through; }

.cm-formatting-list {
  padding: 0 8px 0 32px; }

.cm-code {
  font-family: 'Roboto Mono', monospace; }

.cm-hr::after {
  content: "";
  position: absolute;
  background-color: rgba(255, 255, 255, 0.4);
  height: 1px;
  width: calc(100% - 32px);
  left: 16px;
  right: 16px;
  top: 50%; }

.cm-formatting-quote {
  padding-right: 16px; }
